-------------------Assignment_1 with 50 Questions-----------------------

create database assignment;

use assignment;


create table CITY
(
	ID int,
	NAME VARCHAR(17),
	COUNTRYCODE VARCHAR(3),
	DISTRICT VARCHAR(20),
	POPULATION int
);

insert into CITY VALUES(6,'Rotterdam','NLD','Zuid-Holland',593321);
insert into CITY VALUES(3878,'Scottsdale','USA','Arizona',202705);
insert into CITY VALUES(3965,'Corona','USA','California',124966);
insert into CITY VALUES(3973,'Concord','USA','California',121780);
insert into CITY VALUES(3977,'Cedar Rapids','USA','Iowa',120758);
insert into CITY VALUES(3982,'Coral Springs','USA','Florida',117549);
insert into CITY VALUES(4054,'Fairfield','USA','California',92256);
insert into CITY VALUES(4058,'Boulder','USA','Colorado',91238);
insert into CITY VALUES(4061,'Fall River','USA','Massachusetts',90555);

describe city;

select * from city;

-- Q1. Query all columns for all American cities in the CITY table with populations larger than 100000.
-- The CountryCode for America is USA.

select name 
from city 
where countrycode = 'USA' and population > 100000;

-- Q2. Query the NAME field for all American cities in the CITY table with populations larger than 120000.
-- The CountryCode for America is USA.

select name
from assignment.city 
where COUNTRYCODE = 'USA' and POPULATION > 120000;

-- Q3. Query all columns (attributes) for every row in the CITY table.
 
 select * 
 from assignment.city;

-- Q4. Query all columns for a city in CITY with the ID 1661.

select * 
from assignment.city 
where ID = 1661;

-- Q5. Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN.

select * 
from assignment.city
where COUNTRYCODE = 'JPN';

-- Q6. Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN.

select name
from assignment.city
where COUNTRYCODE = 'JPN';

-- Q7. Query a list of CITY and STATE from the STATION table

create table if not exists STATION
(
ID INT,
CITY VARCHAR(21),
STATE VARCHAR(2),
LAT_N INT,
LONG_W INT
);

INSERT INTO STATION VALUES(794,'Kissee Mills','MO',139,73);
INSERT INTO STATION VALUES(824,'Loma Mar','CA',48,130);
INSERT INTO STATION VALUES(603,'Sandy Hook','CT',72,148);
INSERT INTO STATION VALUES(478,'Tipton','IN',33,97);
INSERT INTO STATION VALUES(619,'Arlington','CO',75,92);
INSERT INTO STATION VALUES(711,'Turner','AR',50,101);
INSERT INTO STATION VALUES(839,'Slidell','LA',85,151);
INSERT INTO STATION VALUES(411,'Negreet','LA',98,105);
INSERT INTO STATION VALUES(588,'Glencoe','KY',46,136);
INSERT INTO STATION VALUES(665,'Chelsea','IA',98,59);
INSERT INTO STATION VALUES(342,'Chignik Lagoon','AK',103,153);
INSERT INTO STATION VALUES(733,'Pelahatchie','MS',38,28);
INSERT INTO STATION VALUES(811,'Dorrance','KS',102,121);

describe table assignment.station;

select * from assignment.station;

-- Q7. Query a list of CITY and STATE from the STATION table.

select city, state
from assignment.station;

-- Q8. Query a list of CITY names from STATION for cities that have an even ID number. Print the results
-- in any order, but exclude duplicates from the answer.

select CITY
from assignment.station
where ID%2=0;

-- Q9. Find the difference between the total number of CITY entries in the table and the number of
-- distinct CITY entries in the table.

select (count(*) - count(distinct city)) as diff_bet_city_and_dict_City
from assignment.station;

/* Q10. Query the two cities in STATION with the shortest and longest CITY names, as well as their
respective lengths (i.e.: number of characters in the name). If there is more than one smallest or
largest city, choose the one that comes first when ordered alphabetically */



select city, length(city) as char_total_len 
from assignment.station
order by length(city) limit 1;


select city, char_length(city) as char_total_len 
from assignment.station
order by char_length(city) limit 1;

-- Q11. Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result
-- cannot contain duplicates.

select city from assignment.station
where CITY like '';

--------------------
select * from assignment.station 
where lower(substr(city , 1, 1)) in ('a','e','i','o','u');
---------------------
------------
select distinct CITY 
from STATION 
where CITY  regexp '^[aeiou]';
----------------

select distinct city from assignment.station
where 
	lcase(city) like 'a%' or
    lcase(city) like 'e%' or
    lcase(city) like 'i%' or
    lcase(city) like 'o%' or
    lcase(city) like 'u%'
    order by city;

-- Q12. Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot
-- contain duplicates

select distinct city from station
where
	lcase(city) like '%a' or
    lcase(city) like '%e' or
    lcase(city) like '%i' or
    lcase(city) like '%o' or 
    lcase(city) like '%u'
    order by city;
    

-- Q13. Query the list of CITY names from STATION that do not start with vowels. Your result cannot
-- contain duplicates.

select distinct city from assignment.station
where 
	lcase(city) not like 'a%' and
    lcase(city) not like 'e%' and
    lcase(city) not like 'i%' and
    lcase(city) not like 'o%' and
    lcase(city) not like 'u%'
    order by city;
    
------------
select distinct CITY 
from STATION 
where CITY not regexp '^[aeiou]';
----------------
    
-- Q14. Query the list of CITY names from STATION that do not end with vowels. Your result cannot
-- contain duplicates.

select distinct city from station
where
	lcase(city) not like '%a' and
    lcase(city) not like '%e' and
    lcase(city) not like '%i' and
    lcase(city) not like '%o' and
    lcase(city) not like '%u'
    order by city;
    
-- Q15. Query the list of CITY names from STATION that either do not start with vowels or do not end
-- with vowels. Your result cannot contain duplicates

select distinct city from station
where
	lcase(city) not like 'a%' and
    lcase(city) not like 'e%' and
    lcase(city) not like 'i%' and
    lcase(city) not like 'o%' and
    lcase(city) not like 'u%' and
	lcase(city) not like '%a' and
    lcase(city) not like '%e' and
    lcase(city) not like '%i' and
    lcase(city) not like '%o' and
    lcase(city) not like '%u'
    order by city;
    
select distinct CITY from STATION where CITY not regexp '^[aeiou]' or
city not regexp '[aeiou]$';


-- Q16. Query the list of CITY names from STATION that do not start with vowels and do not end with
-- vowels. Your result cannot contain duplicates.

select distinct CITY from STATION where CITY not regexp '^[aeiou]' and
city not regexp '[aeiou]$';


-- Q17

-- Product table

create table if not exists Product
(
	product_id int NOT NULL,
	product_name varchar(50),
	unit_price int,
	constraint pk PRIMARY KEY (product_id)
);

insert into Product values(1,'S8',1000);
insert into Product values(2,'G4',800);
insert into Product values(3,'iPhone',1400);

select * from product;

-- Table: Sales

create table if not exists Sales
(
	seller_id int,
	product_id int,
	buyer_id int,
	sale_date date,
	quantity int,
	price int,
	constraint fk FOREIGN KEY (product_id) REFERENCES
	Product(product_id)
);

insert into Sales values(1,1,1,'2019-01-21',2,2000);
insert into Sales values(1,2,2,'2019-02-17',1,800);
insert into Sales values(2,2,3,'2019-06-02',1,800);
insert into Sales values(3,3,4,'2019-05-13',2,2800);

select * from sales;

